scalar Date


#interface Account{
#    accountNo: Int!
#    runningTotal: Int!
#    openingDate: Date
#
#}

union Account = SavingsAccount | CurrentAccount

enum TransactionType{
    DirectDebit,External
}

type SavingsAccount{
    accountNo: Int!
    runningTotal: Int!
    openingDate: Date
    interestRate: Float
    transactionType:TransactionType
}

input SavingsAccountInput{
    accountNo: Int!
    runningTotal: Int!
    openingDate: String
    interestRate: Float
    transactionType:TransactionType
}

type Query{
    findAllSavingsAccount: [SavingsAccount]
    findSavingsAccountById(accountNo: Int!): SavingsAccount
    findSavingsAccountByROI(roi: Float!): [SavingsAccount]
}

type Mutation{
    addSavingsAccount(savingsAccountInput: SavingsAccountInput!): SavingsAccount
    updateSavingsAccount(savingsAccountInput: SavingsAccountInput!): SavingsAccount
    deleteSavingsAccount(accountNo: Int): Boolean
}

schema {
    query: Query
    mutation: Mutation
}